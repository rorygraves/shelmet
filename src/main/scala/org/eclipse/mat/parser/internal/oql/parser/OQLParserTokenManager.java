/*******************************************************************************
 * Copyright (c) 2008, 2012 SAP AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     SAP AG - initial API and implementation
 *     IBM Corporation - move to JavaCC 5.0 and array access
 *******************************************************************************/
/* Generated By:JavaCC: Do not edit this line. OQLParserTokenManager.java */
package org.eclipse.mat.parser.internal.oql.parser;

/**
 * Token Manager.
 */
@SuppressWarnings("nls")
public class OQLParserTokenManager implements OQLParserConstants {

    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x20000000000140L) != 0L)
                    return 2;
                if ((active0 & 0x1fc00000L) != 0L) {
                    jjmatchedKind = 30;
                    return 17;
                }
                if ((active0 & 0x40000000000L) != 0L)
                    return 5;
                if ((active0 & 0x20000000L) != 0L)
                    return 17;
                return -1;
            case 1:
                if ((active0 & 0x100L) != 0L)
                    return 0;
                if ((active0 & 0x1dc00000L) != 0L) {
                    jjmatchedKind = 30;
                    jjmatchedPos = 1;
                    return 17;
                }
                if ((active0 & 0x2000000L) != 0L)
                    return 17;
                return -1;
            case 2:
                if ((active0 & 0x4000000L) != 0L)
                    return 17;
                if ((active0 & 0x19c00000L) != 0L) {
                    jjmatchedKind = 30;
                    jjmatchedPos = 2;
                    return 17;
                }
                return -1;
            case 3:
                if ((active0 & 0x11400000L) != 0L) {
                    jjmatchedKind = 30;
                    jjmatchedPos = 3;
                    return 17;
                }
                if ((active0 & 0x8800000L) != 0L)
                    return 17;
                return -1;
            case 4:
                if ((active0 & 0x10400000L) != 0L) {
                    jjmatchedKind = 30;
                    jjmatchedPos = 4;
                    return 17;
                }
                if ((active0 & 0x1000000L) != 0L)
                    return 17;
                return -1;
            case 5:
                if ((active0 & 0x10400000L) != 0L) {
                    jjmatchedKind = 30;
                    jjmatchedPos = 5;
                    return 17;
                }
                return -1;
            case 6:
                if ((active0 & 0x10400000L) != 0L) {
                    jjmatchedKind = 30;
                    jjmatchedPos = 6;
                    return 17;
                }
                return -1;
            case 7:
                if ((active0 & 0x10400000L) != 0L) {
                    jjmatchedKind = 30;
                    jjmatchedPos = 7;
                    return 17;
                }
                return -1;
            case 8:
                if ((active0 & 0x10400000L) != 0L) {
                    jjmatchedKind = 30;
                    jjmatchedPos = 8;
                    return 17;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 33:
                return jjMoveStringLiteralDfa1_0(0x4000000000L);
            case 36:
                return jjStartNfaWithStates_0(0, 29, 17);
            case 40:
                return jjStopAtPos(0, 46);
            case 41:
                return jjStopAtPos(0, 47);
            case 42:
                return jjStopAtPos(0, 40);
            case 43:
                return jjStopAtPos(0, 51);
            case 44:
                return jjStopAtPos(0, 41);
            case 45:
                return jjStopAtPos(0, 52);
            case 46:
                return jjStartNfaWithStates_0(0, 42, 5);
            case 47:
                jjmatchedKind = 53;
                return jjMoveStringLiteralDfa1_0(0x140L);
            case 59:
                return jjStopAtPos(0, 39);
            case 60:
                jjmatchedKind = 33;
                return jjMoveStringLiteralDfa1_0(0x1000000000L);
            case 61:
                return jjStopAtPos(0, 35);
            case 62:
                jjmatchedKind = 34;
                return jjMoveStringLiteralDfa1_0(0x2000000000L);
            case 64:
                return jjStopAtPos(0, 45);
            case 91:
                jjmatchedKind = 49;
                return jjMoveStringLiteralDfa1_0(0x1000000000000L);
            case 93:
                return jjStopAtPos(0, 50);
            case 65:
            case 97:
                return jjMoveStringLiteralDfa1_0(0x4000000L);
            case 70:
            case 102:
                return jjMoveStringLiteralDfa1_0(0x1000000L);
            case 73:
            case 105:
                return jjMoveStringLiteralDfa1_0(0x10400000L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa1_0(0x8000000L);
            case 79:
            case 111:
                return jjMoveStringLiteralDfa1_0(0x2000000L);
            case 84:
            case 116:
                return jjMoveStringLiteralDfa1_0(0x800000L);
            case 123:
                return jjStopAtPos(0, 43);
            case 125:
                return jjStopAtPos(0, 44);
            default:
                return jjMoveNfa_0(3, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 42:
                if ((active0 & 0x100L) != 0L)
                    return jjStartNfaWithStates_0(1, 8, 0);
                break;
            case 47:
                if ((active0 & 0x40L) != 0L)
                    return jjStopAtPos(1, 6);
                break;
            case 61:
                if ((active0 & 0x1000000000L) != 0L)
                    return jjStopAtPos(1, 36);
                else if ((active0 & 0x2000000000L) != 0L)
                    return jjStopAtPos(1, 37);
                else if ((active0 & 0x4000000000L) != 0L)
                    return jjStopAtPos(1, 38);
                break;
            case 93:
                if ((active0 & 0x1000000000000L) != 0L)
                    return jjStopAtPos(1, 48);
                break;
            case 65:
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
            case 77:
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x4400000L);
            case 82:
            case 114:
                if ((active0 & 0x2000000L) != 0L)
                    return jjStartNfaWithStates_0(1, 25, 17);
                return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 68:
            case 100:
                if ((active0 & 0x4000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 26, 17);
                break;
            case 76:
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x9000000L);
            case 80:
            case 112:
                return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
            case 85:
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 69:
            case 101:
                if ((active0 & 0x800000L) != 0L)
                    return jjStartNfaWithStates_0(3, 23, 17);
                break;
            case 76:
            case 108:
                if ((active0 & 0x8000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 27, 17);
                return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
            case 83:
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
            case 84:
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
            case 65:
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
            case 69:
            case 101:
                if ((active0 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 24, 17);
                return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(3, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar) {
            case 77:
            case 109:
                return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(4, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch (curChar) {
            case 67:
            case 99:
                return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
            case 69:
            case 101:
                return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
            default:
                break;
        }
        return jjStartNfa_0(5, active0);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(5, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0);
            return 7;
        }
        switch (curChar) {
            case 69:
            case 101:
                return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
            case 78:
            case 110:
                return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
            default:
                break;
        }
        return jjStartNfa_0(6, active0);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(6, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0);
            return 8;
        }
        switch (curChar) {
            case 79:
            case 111:
                return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
            case 84:
            case 116:
                return jjMoveStringLiteralDfa9_0(active0, 0x10000000L);
            default:
                break;
        }
        return jjStartNfa_0(7, active0);
    }

    private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(7, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0);
            return 9;
        }
        switch (curChar) {
            case 70:
            case 102:
                if ((active0 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(9, 22, 17);
                break;
            case 83:
            case 115:
                if ((active0 & 0x10000000L) != 0L)
                    return jjStartNfaWithStates_0(9, 28, 17);
                break;
            default:
                break;
        }
        return jjStartNfa_0(8, active0);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static final long[] jjbitVec0 = {0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL};
    static final long[] jjbitVec1 = {0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL,
            0x12000000007fffffL};
    static final long[] jjbitVec3 = {0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL};
    static final long[] jjbitVec4 = {0x7fffffffffffffL, 0xffffffffffff0000L, 0xffffffffffffffffL, 0x401f0003ffc3L};
    static final long[] jjbitVec5 = {0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xfbfffffffff7fffL};
    static final long[] jjbitVec6 = {0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc03L, 0x33fffffffff7fffL};
    static final long[] jjbitVec7 = {0xfffe00000000ffffL, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L};
    static final long[] jjbitVec8 = {0x7fffffe00000000L, 0xfffec000000007ffL, 0xffffffffffffffffL, 0x9c00c060002fffffL};
    static final long[] jjbitVec9 = {0xfffffffd0000L, 0xe000L, 0x2003fffffffffL, 0x0L};
    static final long[] jjbitVec10 = {0x23fffffffffffff0L, 0x3ff010000L, 0x23c5fdfffff99fe0L, 0xf0003b0000000L};
    static final long[] jjbitVec11 = {0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbbfe0L, 0x2000300010000L};
    static final long[] jjbitVec12 = {0x23edfdfffff99fe0L, 0x20003b0000000L, 0x3bfc718d63dc7e8L, 0x200000000000000L};
    static final long[] jjbitVec13 = {0x3effdfffffddfe0L, 0x300000000L, 0x23effdfffffddfe0L, 0x340000000L};
    static final long[] jjbitVec14 = {0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL};
    static final long[] jjbitVec15 = {0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL};
    static final long[] jjbitVec16 = {0x1L, 0x7fffffffeffL, 0xf00L, 0x0L};
    static final long[] jjbitVec17 = {0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x1ffffffffff003fL};
    static final long[] jjbitVec18 = {0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL,
            0x3ffffffffffffffL};
    static final long[] jjbitVec19 = {0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL,
            0xffff7fffff7f7f3dL};
    static final long[] jjbitVec20 = {0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL};
    static final long[] jjbitVec21 = {0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL,
            0xffffffffffffffffL};
    static final long[] jjbitVec22 = {0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x1c7ffffffffffL};
    static final long[] jjbitVec23 = {0x3ffff0003dfffL, 0x1dfff0003ffffL, 0xfffffffffffffL, 0x18800000L};
    static final long[] jjbitVec24 = {0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L};
    static final long[] jjbitVec25 = {0x1fffffffL, 0x1f3fffffff0000L, 0x0L, 0x0L};
    static final long[] jjbitVec26 = {0xffffffffffffffffL, 0xfffffffffffL, 0x0L, 0x0L};
    static final long[] jjbitVec27 = {0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL,
            0x3ffffffffffffffL};
    static final long[] jjbitVec28 = {0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL,
            0x1fdc1fff0fcf1fdcL};
    static final long[] jjbitVec29 = {0x8000000000000000L, 0x8002000000100001L, 0x3ffff00000000L, 0x0L};
    static final long[] jjbitVec30 = {0xe3fbbd503e2ffc84L, 0xffffffff000003e0L, 0xfL, 0x0L};
    static final long[] jjbitVec31 = {0x1f3e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffee07fffffL,
            0xffffffffffffffffL};
    static final long[] jjbitVec32 = {0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0xffff000000000000L};
    static final long[] jjbitVec33 = {0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L};
    static final long[] jjbitVec34 = {0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L};
    static final long[] jjbitVec35 = {0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L};
    static final long[] jjbitVec36 = {0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L};
    static final long[] jjbitVec37 = {0x6L, 0x0L, 0x0L, 0x0L};
    static final long[] jjbitVec38 = {0xffff3fffffffffffL, 0x7ffffffffffL, 0x0L, 0x0L};
    static final long[] jjbitVec39 = {0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L};
    static final long[] jjbitVec40 = {0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL,
            0x1fff0000000000ffL};
    static final long[] jjbitVec41 = {0x18000000000000L, 0xffdf02000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL};
    static final long[] jjbitVec42 = {0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL};
    static final long[] jjbitVec43 = {0x0L, 0x0L, 0x420243cffffffffL, 0xff7fffffff7fffffL};
    static final long[] jjbitVec44 = {0xffffffffffffffffL, 0x400ffffe0ffffffL, 0xfffffffbffffd740L, 0xfbfffffffff7fffL};
    static final long[] jjbitVec45 = {0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc7bL,
            0x33fffffffff7fffL};
    static final long[] jjbitVec46 = {0xfffe00000000ffffL, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L};
    static final long[] jjbitVec47 = {0x7fffffe003f000fL, 0xffffc3ff01ffffffL, 0xffffffffffffffffL,
            0x9ffffdffbfefffffL};
    static final long[] jjbitVec48 = {0xffffffffffff8000L, 0xe7ffL, 0x3ffffffffffffL, 0x0L};
    static final long[] jjbitVec49 = {0xf3fffffffffffffeL, 0xffcfff1f3fffL, 0xf3c5fdfffff99feeL, 0xfffcfb080399fL};
    static final long[] jjbitVec50 = {0xd36dfdfffff987eeL, 0x1fffc05e003987L, 0xf3edfdfffffbbfeeL, 0x2ffcf00013bbfL};
    static final long[] jjbitVec51 = {0xf3edfdfffff99feeL, 0x2ffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0x200ff8000803dc7L};
    static final long[] jjbitVec52 = {0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xf3effdfffffddfecL, 0xffc340603ddfL};
    static final long[] jjbitVec53 = {0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL};
    static final long[] jjbitVec54 = {0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL};
    static final long[] jjbitVec55 = {0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L};
    static final long[] jjbitVec56 = {0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x1ffffffffff003fL};
    static final long[] jjbitVec57 = {0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL};
    static final long[] jjbitVec58 = {0x1fffff001fdfffL, 0xddfff000fffffL, 0xffffffffffffffffL, 0x3ff388fffffL};
    static final long[] jjbitVec59 = {0xffffffff03ff3800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L};
    static final long[] jjbitVec60 = {0xfff0fff1fffffffL, 0x1f3fffffffffc0L, 0x0L, 0x0L};
    static final long[] jjbitVec61 = {0x80007c000000f000L, 0x8002fc0f00100001L, 0x3ffff00000000L, 0x7e21fff0000L};
    static final long[] jjbitVec62 = {0x1f3efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffee67fffffL,
            0xffffffffffffffffL};
    static final long[] jjbitVec63 = {0x10000000000006L, 0x0L, 0x0L, 0x0L};
    static final long[] jjbitVec64 = {0x3L, 0x0L, 0x0L, 0x0L};
    static final long[] jjbitVec65 = {0x0L, 0x800000000000000L, 0x0L, 0x0L};
    static final long[] jjbitVec66 = {0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L};
    static final long[] jjbitVec67 = {0x18000f0000ffffL, 0xffdf02000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL};
    static final long[] jjbitVec68 = {0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL,
            0xe0000631cfcfcfcL};

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 42;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 3:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(0, 6);
                            else if (curChar == 36) {
                                if (kind > 30)
                                    kind = 30;
                                jjCheckNAdd(17);
                            } else if (curChar == 34)
                                jjCheckNAddTwoStates(14, 15);
                            else if (curChar == 39)
                                jjstateSet[jjnewStateCnt++] = 11;
                            else if (curChar == 46)
                                jjCheckNAdd(5);
                            else if (curChar == 47)
                                jjstateSet[jjnewStateCnt++] = 2;
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 13)
                                    kind = 13;
                                jjCheckNAddStates(7, 9);
                            } else if (curChar == 48) {
                                if (kind > 13)
                                    kind = 13;
                                jjCheckNAddStates(10, 13);
                            }
                            break;
                        case 0:
                            if (curChar == 42)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 1:
                            if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                                kind = 7;
                            break;
                        case 2:
                            if (curChar == 42)
                                jjstateSet[jjnewStateCnt++] = 0;
                            break;
                        case 4:
                            if (curChar == 46)
                                jjCheckNAdd(5);
                            break;
                        case 5:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 18)
                                kind = 18;
                            jjCheckNAddStates(14, 16);
                            break;
                        case 7:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(8);
                            break;
                        case 8:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 18)
                                kind = 18;
                            jjCheckNAddTwoStates(8, 9);
                            break;
                        case 10:
                            if (curChar == 39)
                                jjstateSet[jjnewStateCnt++] = 11;
                            break;
                        case 11:
                            if ((0xffffff7fffffdbffL & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 12;
                            break;
                        case 12:
                            if (curChar == 39 && kind > 20)
                                kind = 20;
                            break;
                        case 13:
                            if (curChar == 34)
                                jjCheckNAddTwoStates(14, 15);
                            break;
                        case 14:
                            if ((0xfffffffbffffdbffL & l) != 0L)
                                jjCheckNAddTwoStates(14, 15);
                            break;
                        case 15:
                            if (curChar == 34 && kind > 21)
                                kind = 21;
                            break;
                        case 16:
                            if (curChar != 36)
                                break;
                            if (kind > 30)
                                kind = 30;
                            jjCheckNAdd(17);
                            break;
                        case 17:
                            if ((0x3ff00100fffc1ffL & l) == 0L)
                                break;
                            if (kind > 30)
                                kind = 30;
                            jjCheckNAdd(17);
                            break;
                        case 18:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(0, 6);
                            break;
                        case 19:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(19, 20);
                            break;
                        case 20:
                            if (curChar != 46)
                                break;
                            if (kind > 18)
                                kind = 18;
                            jjCheckNAddStates(17, 19);
                            break;
                        case 21:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 18)
                                kind = 18;
                            jjCheckNAddStates(17, 19);
                            break;
                        case 23:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(24);
                            break;
                        case 24:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 18)
                                kind = 18;
                            jjCheckNAddTwoStates(24, 9);
                            break;
                        case 25:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(25, 26);
                            break;
                        case 27:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(28);
                            break;
                        case 28:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 18)
                                kind = 18;
                            jjCheckNAddTwoStates(28, 9);
                            break;
                        case 29:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(20, 22);
                            break;
                        case 31:
                            if ((0x280000000000L & l) != 0L)
                                jjCheckNAdd(32);
                            break;
                        case 32:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(32, 9);
                            break;
                        case 33:
                            if ((0x3fe000000000000L & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjCheckNAddStates(7, 9);
                            break;
                        case 34:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjCheckNAdd(34);
                            break;
                        case 35:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(35, 36);
                            break;
                        case 37:
                            if (curChar != 48)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjCheckNAddStates(10, 13);
                            break;
                        case 38:
                            if ((0xff000000000000L & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjCheckNAdd(38);
                            break;
                        case 39:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(39, 36);
                            break;
                        case 41:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 16)
                                kind = 16;
                            jjstateSet[jjnewStateCnt++] = 41;
                            break;
                        default:
                            break;
                    }
                }
                while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 3:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 30)
                                kind = 30;
                            jjCheckNAdd(17);
                            break;
                        case 1:
                            if (kind > 7)
                                kind = 7;
                            break;
                        case 6:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(23, 24);
                            break;
                        case 9:
                            if ((0x5000000050L & l) != 0L && kind > 18)
                                kind = 18;
                            break;
                        case 11:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 12;
                            break;
                        case 14:
                            jjAddStates(25, 26);
                            break;
                        case 17:
                            if ((0x87fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 30)
                                kind = 30;
                            jjCheckNAdd(17);
                            break;
                        case 22:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(27, 28);
                            break;
                        case 26:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(29, 30);
                            break;
                        case 30:
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(31, 32);
                            break;
                        case 36:
                            if ((0x100000001000L & l) != 0L && kind > 14)
                                kind = 14;
                            break;
                        case 40:
                            if ((0x100000001000000L & l) != 0L)
                                jjCheckNAdd(41);
                            break;
                        case 41:
                            if ((0x7e0000007eL & l) == 0L)
                                break;
                            if (kind > 16)
                                kind = 16;
                            jjCheckNAdd(41);
                            break;
                        default:
                            break;
                    }
                }
                while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 3:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 30)
                                kind = 30;
                            jjCheckNAdd(17);
                            break;
                        case 1:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                                kind = 7;
                            break;
                        case 11:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjstateSet[jjnewStateCnt++] = 12;
                            break;
                        case 14:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjAddStates(25, 26);
                            break;
                        case 17:
                            if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                                break;
                            if (kind > 30)
                                kind = 30;
                            jjCheckNAdd(17);
                            break;
                        default:
                            break;
                    }
                }
                while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private int jjMoveStringLiteralDfa0_3() {
        switch (curChar) {
            case 42:
                return jjMoveStringLiteralDfa1_3(0x800L);
            default:
                return 1;
        }
    }

    private int jjMoveStringLiteralDfa1_3(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 1;
        }
        switch (curChar) {
            case 47:
                if ((active0 & 0x800L) != 0L)
                    return jjStopAtPos(1, 11);
                break;
            default:
                return 2;
        }
        return 2;
    }

    private int jjMoveStringLiteralDfa0_1() {
        return jjMoveNfa_1(0, 0);
    }

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x2400L & l) != 0L) {
                                if (kind > 9)
                                    kind = 9;
                            }
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        case 1:
                            if (curChar == 10 && kind > 9)
                                kind = 9;
                            break;
                        case 2:
                            if (curChar == 13)
                                jjstateSet[jjnewStateCnt++] = 1;
                            break;
                        default:
                            break;
                    }
                }
                while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                }
                while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                }
                while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private int jjMoveStringLiteralDfa0_2() {
        switch (curChar) {
            case 42:
                return jjMoveStringLiteralDfa1_2(0x400L);
            default:
                return 1;
        }
    }

    private int jjMoveStringLiteralDfa1_2(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return 1;
        }
        switch (curChar) {
            case 47:
                if ((active0 & 0x400L) != 0L)
                    return jjStopAtPos(1, 10);
                break;
            default:
                return 2;
        }
        return 2;
    }

    static final int[] jjnextStates = {19, 20, 25, 26, 29, 30, 9, 34, 35, 36, 38, 39, 36, 40, 5, 6, 9, 21, 22, 9, 29,
            30, 9, 7, 8, 14, 15, 23, 24, 27, 28, 31, 32,};

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec0[i2] & l2) != 0L);
            default:
                return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec3[i2] & l2) != 0L);
            case 2:
                return ((jjbitVec4[i2] & l2) != 0L);
            case 3:
                return ((jjbitVec5[i2] & l2) != 0L);
            case 4:
                return ((jjbitVec6[i2] & l2) != 0L);
            case 5:
                return ((jjbitVec7[i2] & l2) != 0L);
            case 6:
                return ((jjbitVec8[i2] & l2) != 0L);
            case 7:
                return ((jjbitVec9[i2] & l2) != 0L);
            case 9:
                return ((jjbitVec10[i2] & l2) != 0L);
            case 10:
                return ((jjbitVec11[i2] & l2) != 0L);
            case 11:
                return ((jjbitVec12[i2] & l2) != 0L);
            case 12:
                return ((jjbitVec13[i2] & l2) != 0L);
            case 13:
                return ((jjbitVec14[i2] & l2) != 0L);
            case 14:
                return ((jjbitVec15[i2] & l2) != 0L);
            case 15:
                return ((jjbitVec16[i2] & l2) != 0L);
            case 16:
                return ((jjbitVec17[i2] & l2) != 0L);
            case 17:
                return ((jjbitVec18[i2] & l2) != 0L);
            case 18:
                return ((jjbitVec19[i2] & l2) != 0L);
            case 19:
                return ((jjbitVec20[i2] & l2) != 0L);
            case 20:
                return ((jjbitVec21[i2] & l2) != 0L);
            case 22:
                return ((jjbitVec22[i2] & l2) != 0L);
            case 23:
                return ((jjbitVec23[i2] & l2) != 0L);
            case 24:
                return ((jjbitVec24[i2] & l2) != 0L);
            case 25:
                return ((jjbitVec25[i2] & l2) != 0L);
            case 29:
                return ((jjbitVec26[i2] & l2) != 0L);
            case 30:
                return ((jjbitVec27[i2] & l2) != 0L);
            case 31:
                return ((jjbitVec28[i2] & l2) != 0L);
            case 32:
                return ((jjbitVec29[i2] & l2) != 0L);
            case 33:
                return ((jjbitVec30[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec31[i2] & l2) != 0L);
            case 49:
                return ((jjbitVec32[i2] & l2) != 0L);
            case 77:
                return ((jjbitVec33[i2] & l2) != 0L);
            case 159:
                return ((jjbitVec34[i2] & l2) != 0L);
            case 164:
                return ((jjbitVec35[i2] & l2) != 0L);
            case 215:
                return ((jjbitVec36[i2] & l2) != 0L);
            case 216:
                return ((jjbitVec37[i2] & l2) != 0L);
            case 250:
                return ((jjbitVec38[i2] & l2) != 0L);
            case 251:
                return ((jjbitVec39[i2] & l2) != 0L);
            case 253:
                return ((jjbitVec40[i2] & l2) != 0L);
            case 254:
                return ((jjbitVec41[i2] & l2) != 0L);
            case 255:
                return ((jjbitVec42[i2] & l2) != 0L);
            default:
                if ((jjbitVec1[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec43[i2] & l2) != 0L);
            case 2:
                return ((jjbitVec4[i2] & l2) != 0L);
            case 3:
                return ((jjbitVec44[i2] & l2) != 0L);
            case 4:
                return ((jjbitVec45[i2] & l2) != 0L);
            case 5:
                return ((jjbitVec46[i2] & l2) != 0L);
            case 6:
                return ((jjbitVec47[i2] & l2) != 0L);
            case 7:
                return ((jjbitVec48[i2] & l2) != 0L);
            case 9:
                return ((jjbitVec49[i2] & l2) != 0L);
            case 10:
                return ((jjbitVec50[i2] & l2) != 0L);
            case 11:
                return ((jjbitVec51[i2] & l2) != 0L);
            case 12:
                return ((jjbitVec52[i2] & l2) != 0L);
            case 13:
                return ((jjbitVec53[i2] & l2) != 0L);
            case 14:
                return ((jjbitVec54[i2] & l2) != 0L);
            case 15:
                return ((jjbitVec55[i2] & l2) != 0L);
            case 16:
                return ((jjbitVec56[i2] & l2) != 0L);
            case 17:
                return ((jjbitVec18[i2] & l2) != 0L);
            case 18:
                return ((jjbitVec19[i2] & l2) != 0L);
            case 19:
                return ((jjbitVec57[i2] & l2) != 0L);
            case 20:
                return ((jjbitVec21[i2] & l2) != 0L);
            case 22:
                return ((jjbitVec22[i2] & l2) != 0L);
            case 23:
                return ((jjbitVec58[i2] & l2) != 0L);
            case 24:
                return ((jjbitVec59[i2] & l2) != 0L);
            case 25:
                return ((jjbitVec60[i2] & l2) != 0L);
            case 29:
                return ((jjbitVec26[i2] & l2) != 0L);
            case 30:
                return ((jjbitVec27[i2] & l2) != 0L);
            case 31:
                return ((jjbitVec28[i2] & l2) != 0L);
            case 32:
                return ((jjbitVec61[i2] & l2) != 0L);
            case 33:
                return ((jjbitVec30[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec62[i2] & l2) != 0L);
            case 49:
                return ((jjbitVec32[i2] & l2) != 0L);
            case 77:
                return ((jjbitVec33[i2] & l2) != 0L);
            case 159:
                return ((jjbitVec34[i2] & l2) != 0L);
            case 164:
                return ((jjbitVec35[i2] & l2) != 0L);
            case 215:
                return ((jjbitVec36[i2] & l2) != 0L);
            case 216:
                return ((jjbitVec63[i2] & l2) != 0L);
            case 220:
                return ((jjbitVec64[i2] & l2) != 0L);
            case 221:
                return ((jjbitVec65[i2] & l2) != 0L);
            case 250:
                return ((jjbitVec38[i2] & l2) != 0L);
            case 251:
                return ((jjbitVec66[i2] & l2) != 0L);
            case 253:
                return ((jjbitVec40[i2] & l2) != 0L);
            case 254:
                return ((jjbitVec67[i2] & l2) != 0L);
            case 255:
                return ((jjbitVec68[i2] & l2) != 0L);
            default:
                if ((jjbitVec1[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {"", null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, "\44", null, null, null, "\74", "\76", "\75", "\74\75", "\76\75", "\41\75", "\73",
            "\52", "\54", "\56", "\173", "\175", "\100", "\50", "\51", "\133\135", "\133", "\135", "\53",
            "\55", "\57",};

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {"DEFAULT", "IN_SINGLE_LINE_COMMENT", "IN_FORMAL_COMMENT",
            "IN_MULTI_LINE_COMMENT",};

    /**
     * Lex State array.
     */
    public static final int[] jjnewLexState = {-1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,};
    static final long[] jjtoToken = {0x3ffffe7ff56001L,};
    static final long[] jjtoSkip = {0xe3eL,};
    static final long[] jjtoSpecial = {0xe00L,};
    static final long[] jjtoMore = {0x11c0L,};
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[42];
    private final int[] jjstateSet = new int[84];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected char curChar;

    /**
     * Constructor.
     */
    public OQLParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public OQLParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 42; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if (lexState >= 4 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                    TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }
            image = jjimage;
            image.setLength(0);
            jjimageLen = 0;

            for (; ; ) {
                switch (curLexState) {
                    case 0:
                        try {
                            input_stream.backup(0);
                            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
                                curChar = input_stream.BeginToken();
                        } catch (java.io.IOException e1) {
                            continue EOFLoop;
                        }
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_0();
                        break;
                    case 1:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_1();
                        if (jjmatchedPos == 0 && jjmatchedKind > 12) {
                            jjmatchedKind = 12;
                        }
                        break;
                    case 2:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_2();
                        if (jjmatchedPos == 0 && jjmatchedKind > 12) {
                            jjmatchedKind = 12;
                        }
                        break;
                    case 3:
                        jjmatchedKind = 0x7fffffff;
                        jjmatchedPos = 0;
                        curPos = jjMoveStringLiteralDfa0_3();
                        if (jjmatchedPos == 0 && jjmatchedKind > 12) {
                            jjmatchedKind = 12;
                        }
                        break;
                }
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos)
                        input_stream.backup(curPos - jjmatchedPos - 1);
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        matchedToken.specialToken = specialToken;
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        return matchedToken;
                    } else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                            matchedToken = jjFillToken();
                            if (specialToken == null)
                                specialToken = matchedToken;
                            else {
                                matchedToken.specialToken = specialToken;
                                specialToken = (specialToken.next = matchedToken);
                            }
                            SkipLexicalActions(matchedToken);
                        } else
                            SkipLexicalActions(null);
                        if (jjnewLexState[jjmatchedKind] != -1)
                            curLexState = jjnewLexState[jjmatchedKind];
                        continue EOFLoop;
                    }
                    MoreLexicalActions();
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    curPos = 0;
                    jjmatchedKind = 0x7fffffff;
                    try {
                        curChar = input_stream.readChar();
                        continue;
                    } catch (java.io.IOException e1) {
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else
                        error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
                        TokenMgrError.LEXICAL_ERROR);
            }
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            default:
                break;
        }
    }

    void MoreLexicalActions() {
        jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
        switch (jjmatchedKind) {
            case 7:
                image.append(input_stream.GetSuffix(jjimageLen));
                jjimageLen = 0;
                input_stream.backup(1);
                break;
            default:
                break;
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        }
        while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        }
        while (start++ != end);
    }

}
